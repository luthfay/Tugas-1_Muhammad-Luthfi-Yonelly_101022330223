from roboflow import Roboflow
rf = Roboflow(api_key="SAX0jD41ZGK69idkwIsn")
project = rf.workspace("tugas-imv").project("my-first-project-oz54d-o7fzl")
version = project.version(3)
dataset = version.download("yolov11")

print(dataset.location) #lihat lokasi dataset

IMAGE_DIR = 'd:\\TUGAS IMV\\My-First-Project-3\\*\\images'
IMAGE_DIR_TRAIN = 'd:\\TUGAS IMV\\My-First-Project-3\\train\\images'
IMAGE_DIR_VALID = 'd:\\TUGAS IMV\\My-First-Project-3\\valid\\images'

from glob import glob
image_paths = glob(IMAGE_DIR + '/*.jpg')
print(f'Jumlah file gambar: {len(image_paths)}')
image_paths_train = glob(IMAGE_DIR_TRAIN + '/*.jpg')
print(f'Jumlah file gambar pada train: {len(image_paths_train)}')
image_paths_valid = glob(IMAGE_DIR_VALID + '/*.jpg')
print(f'Jumlah file gambar pada valid: {len(image_paths_valid)}')

ANNOTATION_DIR = 'd:\\TUGAS IMV\\My-First-Project-3\\*\\labels'# ganti dengan lokasi dataset
ANNOTATION_DIR_TRAIN = 'd:\\TUGAS IMV\\My-First-Project-3\\train\\labels'# ganti dengan lokasi dataset
ANNOTATION_DIR_VALID = 'd:\\TUGAS IMV\\My-First-Project-3\\valid\\labels'# ganti dengan lokasi dataset

annotation_paths = glob(ANNOTATION_DIR + '/*.txt')
print(f'Jumlah file anotasi txt: {len(annotation_paths)}')
annotation_paths_train = glob(ANNOTATION_DIR_TRAIN + '/*.txt')
print(f'Jumlah file anotasi txt pada train: {len(annotation_paths_train)}')
annotation_paths_valid = glob(ANNOTATION_DIR_VALID + '/*.txt')
print(f'Jumlah file anotasi txt pada valid: {len(annotation_paths_valid)}')

amount_per_class = {}
for i in range(len(annotation_paths)):  
    f = open(annotation_paths[i], "r") 
    for anotate in f:      
        if anotate[0] not in amount_per_class.keys():        
            amount_per_class[anotate[0]] = 1      
        else:        
            amount_per_class[anotate[0]] += 1
print(f"Jumlah total objek: {sum(amount_per_class.values())}")
print(f'Jumlah objek per class: {amount_per_class}')

amount_per_class = {}
for i in range(len(annotation_paths_train)):  
    f = open(annotation_paths_train[i], "r")  
    for anotate in f:      
        if anotate[0] not in amount_per_class.keys():        
            amount_per_class[anotate[0]] = 1      
        else:        amount_per_class[anotate[0]] += 1
print(f"Jumlah total objek pada train: {sum(amount_per_class.values())}")
print(f'Jumlah objek per class pada train: {amount_per_class}')

amount_per_class = {}
for i in range(len(annotation_paths_valid)):  
    f = open(annotation_paths_valid[i], "r")  
    for anotate in f:      
        if anotate[0] not in amount_per_class.keys():        
            amount_per_class[anotate[0]] = 1      
        else:        amount_per_class[anotate[0]] += 1
print(f"Jumlah total objek pada valid: {sum(amount_per_class.values())}")
print(f'Jumlah objek per class pada valid: {amount_per_class}')

from roboflow import Roboflow
import os # Import os untuk join path jika diperlukan

# Ganti dengan API Key Anda yang sebenarnya dari Roboflow
rf = Roboflow(api_key="SAX0jD41ZGK69idkwIsn")

# Ganti dengan nama workspace dan project Anda yang sebenarnya
project = rf.workspace("tugas-imv").project("my-first-project-oz54d-o7fzl")

# Ganti dengan nomor versi dataset Anda (misalnya "1", "2", dll.)
# Format "yolov5" akan mengunduh dataset dalam format YOLOv5
dataset = project.version("3").download("yolov11")

# 'dataset.location' sekarang akan berisi path ke dataset yang diunduh
# Contoh output: print(dataset.location) -> 'd:\\TUGAS IMV\\My-First-Project-1-yolov5'
print(f"Dataset berhasil diunduh ke: {dataset.location}")

# Anda juga dapat menyimpan lokasi ini untuk digunakan nanti
# dataset_base_path = dataset.location

from ultralytics import YOLO
epoch= 10
model = YOLO("yolo11n.pt") #
results = model.train(data=dataset.location + "/data.yaml", epochs=epoch)

print(dir(results))

%matplotlib inline 

import pandas as pd
import matplotlib.pyplot as plt

# Load the results.csv file
file_path = 'd:\\TUGAS IMV\\runs\\detect\\train2\\results.csv'
results_df = pd.read_csv(file_path)

# Plot training and validation loss
plt.figure(figsize=(10, 5))
plt.plot(results_df['epoch'], results_df['train/box_loss'], label='Train/Box Loss')
plt.plot(results_df['epoch'], results_df['val/box_loss'], label='Val/Box Loss')
plt.plot(results_df['epoch'], results_df['train/cls_loss'], label='Train/Cls Loss')
plt.plot(results_df['epoch'], results_df['val/cls_loss'], label='Val/Cls Loss')
plt.plot(results_df['epoch'], results_df['train/dfl_loss'], label='Train/Dfl Loss')
plt.plot(results_df['epoch'], results_df['val/dfl_loss'], label='Val/Dfl Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# Tidak perlu plt.show() di interactive mode

# Plot precision and recall
plt.figure(figsize=(10, 5))
plt.plot(results_df['epoch'], results_df['metrics/precision(B)'], label='Precision')
plt.plot(results_df['epoch'], results_df['metrics/recall(B)'], label='Recall')
plt.title('Precision and Recall')
plt.xlabel('Epochs')
plt.ylabel('Metric')
plt.legend()

# Plot mAP
plt.figure(figsize=(10, 5))
plt.plot(results_df['epoch'], results_df['metrics/mAP50-95(B)'], label='mAP50-95')
plt.title('Mean Average Precision (mAP)')
plt.xlabel('Epochs')
plt.ylabel('mAP')
plt.legend()

model = YOLO("d:\\TUGAS IMV\\runs\\detect\\train2\\weights\\best.pt") #Isi dengan path ke model kalian yang sudah selesai train
results = model.predict(source=dataset.location + "/test/images", save=True, conf=0.25)#predict semua gambar pada testset
metrics = model.val(data=dataset.location + "/data.yaml")# evaluasi model pada test set

import matplotlib.pyplot as plt
import cv2
import os

%matplotlib inline 

saved_images_dir = "d:\\TUGAS IMV\\runs\\detect\\predict2"
image_files = [os.path.join(saved_images_dir, img) for img in os.listdir(saved_images_dir) if img.endswith(('.png', '.jpg'))]

for img_path in image_files[:10]:  # Tampilkan 5 dulu biar gampang cek
    img = cv2.imread(img_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    plt.figure(figsize=(10, 10))
    plt.imshow(img)
    plt.axis('off')
    plt.title(f"Predicted: {os.path.basename(img_path)}")

import cv2
from ultralytics import YOLO
from IPython.display import display, clear_output
from PIL import Image

model = YOLO("d:/TUGAS IMV/runs/detect/train2/weights/best.pt")

cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    results = model(frame)
    annotated_frame = results[0].plot()

   
    annotated_frame_rgb = cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB)
    img = Image.fromarray(annotated_frame_rgb)

    clear_output(wait=True)
    display(img)


    if cv2.waitKey(3) & 0xFF == ord('q'):
        break

cap.release()
